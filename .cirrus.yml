---

# Main environment vars to set for all tasks
env:


    FEDORA_NAME: "fedora-34"
    FEDORA_PRIOR_NAME: "fedora-33"

    UBUNTU_NAME: "ubuntu-20.04"
    UBUNTU_PRIOR_NAME: "ubuntu-18.04"

    CENTOS_NAME: "centos-stream-8"

    CENTOS_PROJECT: "centos-cloud"
    FEDORA_PROJECT: "fedora-cloud"
    SOS_PROJECT: "sos-devel-jobs"
    UBUNTU_PROJECT: "ubuntu-os-cloud"

    # Images exist on GCP already
    CENTOS_IMAGE_NAME: "centos-stream-8-v20210316"
    FEDORA_IMAGE_NAME: "fedora-cloud-base-gcp-34-1-2-x86-64"
    FEDORA_PRIOR_IMAGE_NAME: "fedora-cloud-base-gcp-33-1-2-x86-64"
    UBUNTU_IMAGE_NAME: "ubuntu-2004-focal-v20201111"
    UBUNTU_PRIOR_IMAGE_NAME: "ubuntu-1804-bionic-v20201111"

# Default task timeout
timeout_in: 30m

gcp_credentials: ENCRYPTED[!77d4c8251094346c41db63cb05eba2ff98eaff04e58c5d0e2a8e2c6f159f7d601b3fe9a2a4fce1666297e371f2fc8752!]

# Run a simple lint on the community cluster
flake8_task:
    alias: "flake8_test"
    name: "Flake8 linting test"
    container:
        image: alpine/flake8:latest
    flake_script: flake8 sos

# nose tests, again on the community cluster
nosetests_task:
    alias: nosetests
    name: "Nosetests"
    container:
        image: python:slim
    setup_script: pip install nose
    nose_script: nosetests -v --with-cover --cover-package=sos tests/unittests

# Run a check on newer upstream python versions to check for possible
# breaks/changes in common modules. This is not meant to check any of the actual
# collections or archive integrity.
py_break_task:
    alias: "py_break"
    name: "Breakage test python-$PY_VERSION"
    container:
        image: "python:${PY_VERSION}"
    matrix:
        - env:
            PY_VERSION: "latest"
        - env:
            PY_VERSION: "3.9"
    setup_script: pip install -r requirements.txt
    main_script: ./bin/sos report --batch

# Run the stage one (no mocking) tests across all distros on GCP
report_stageone_task:
    alias: "stageone_report"
    name: "Report Stage One - $BUILD_NAME"
    gce_instance: &standardvm
        image_project: "${PROJECT}"
        image_name: "${VM_IMAGE_NAME}"
        cpu: 2
        memory: "4Gb"
        # minimum disk size is 20
        disk: 20
    matrix:
        - env:
            PROJECT: ${CENTOS_PROJECT}
            BUILD_NAME: ${CENTOS_NAME}
            VM_IMAGE_NAME: ${CENTOS_IMAGE_NAME}
        - env:
            PROJECT: ${FEDORA_PROJECT}
            BUILD_NAME: ${FEDORA_NAME}
            VM_IMAGE_NAME: ${FEDORA_IMAGE_NAME}
        - env:
            PROJECT: ${FEDORA_PROJECT}
            BUILD_NAME: ${FEDORA_PRIOR_NAME}
            VM_IMAGE_NAME: ${FEDORA_PRIOR_IMAGE_NAME}
        - env:
            PROJECT: ${UBUNTU_PROJECT}
            BUILD_NAME: ${UBUNTU_NAME}
            VM_IMAGE_NAME: ${UBUNTU_IMAGE_NAME}
        - env:
            PROJECT: ${UBUNTU_PROJECT}
            BUILD_NAME: ${UBUNTU_PRIOR_NAME}
            VM_IMAGE_NAME: ${UBUNTU_PRIOR_IMAGE_NAME}
    remove_sos_script: &remove_sos |
        if [ $(command -v apt) ] && [ $(command -v sosreport) ]; then
            apt -y purge sosreport
            apt update
            apt -y install python3-pip
        fi
        if [ $(command -v dnf) ] && [ $(command -v sos) ]; then
            dnf -y remove sos
        fi
    setup_script: &setup 'pip3 install avocado-framework'
    main_script: PYTHONPATH=tests/ avocado run -t stageone tests/

# IFF the stage one tests all pass, then run stage two for latest distros
report_stagetwo_task:
    alias: "stagetwo_report"
    name: "Report Stage Two - $BUILD_NAME"
    depends_on: stageone_report
    gce_instance: *standardvm
    matrix:
        - env:
            PROJECT: ${CENTOS_PROJECT}
            BUILD_NAME: ${CENTOS_NAME}
            VM_IMAGE_NAME: ${CENTOS_IMAGE_NAME}
        - env:
            PROJECT: ${FEDORA_PROJECT}
            BUILD_NAME: ${FEDORA_NAME}
            VM_IMAGE_NAME: ${FEDORA_IMAGE_NAME}
        - env:
            PROJECT: ${UBUNTU_PROJECT}
            BUILD_NAME: ${UBUNTU_NAME}
            VM_IMAGE_NAME: ${UBUNTU_IMAGE_NAME}
    remove_sos_script: *remove_sos
    setup_script: *setup
    main_script: PYTHONPATH=tests/ avocado run -t stagetwo tests/
